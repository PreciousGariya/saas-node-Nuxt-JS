// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://sammy:password@localhost:3306/node_saas"
}

// Define the User model
model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  password               String
  firstName              String?
  lastName               String
  phone                  String
  stripeCustomerId       String?
  emailVerified          DateTime?
  subscriptionStatus     String?
  role                   UserRole                 @default(user)
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  VerificationCode       VerificationCode[]
  Subscription           Subscription[]
  SubscriptionHasInvoice SubscriptionHasInvoice[]
  SubscriptionHasProduct SubscriptionHasProduct[]
  Post                   Post[]
}

// Define the UserRole enum
enum UserRole {
  user
  admin
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  code      String
  createdAt DateTime @default(now())
}

model Plan {
  id                Int      @id @default(autoincrement())
  stripe_price_id   String
  stripe_product_id String
  interval          String
  price             Float
  title             String
  description       String?
  createdAt         DateTime @default(now())
}

model Subscription {
  id                     Int                      @id @default(autoincrement())
  subscriptionId         String?                  @unique
  status                 String?
  startDate              DateTime?
  endDate                DateTime?
  amount                 Decimal
  User                   User                     @relation(fields: [user_id], references: [id])
  user_id                Int
  SubscriptionHasInvoice SubscriptionHasInvoice[]
  SubscriptionHasProduct SubscriptionHasProduct[]
}

model SubscriptionHasInvoice {
  id             Int          @id @default(autoincrement())
  invoiceId      String       @unique
  pdf            String?
  amount         Decimal
  status         String?
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  User           User         @relation(fields: [user_id], references: [id])
  user_id        Int
}

model SubscriptionHasProduct {
  id             Int          @id @default(autoincrement())
  productId      String       @unique
  qty            Int          @default(1)
  productName    String?
  Subscription   Subscription @relation(fields: [SubscriptionId], references: [id])
  SubscriptionId Int
  User           User         @relation(fields: [user_id], references: [id])
  user_id        Int
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parent_id   Int?
  parent      Category?  @relation("ChildCategories", fields: [parent_id], references: [id])
  children    Category[] @relation("ChildCategories")
  posts       Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  user_id     Int // Foreign key referencing the User model
  category_id Int? // Nullable foreign key referencing the Category model
  parent_id   Int? // Nullable foreign key referencing the same Post model
  title       String
  metaTitle   String?
  slug        String    @unique
  summary     String?
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  publishedAt DateTime?
  content     String?

  // Define the foreign key relationship with the User model
  author   User      @relation(fields: [user_id], references: [id])
  // Define the foreign key relationship with the Category model
  category Category? @relation(fields: [category_id], references: [id])

  // Define the parent-child relationship within the Post model
  parent   Post?  @relation("ChildPosts", fields: [parent_id], references: [id])
  children Post[] @relation("ChildPosts")
}
